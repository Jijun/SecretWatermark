// xlang

class MainDialog : QXDialog{

	QXPushButton btnOk = new QXPushButton(), 
		btnAdd = new QXPushButton(), 
		btnref = new QXPushButton(), 
        btnSave = new QXPushButton(), 
        btnAbout =  new QXPushButton(),
        genmark =  new QXPushButton(),
        selfont = new QXPushButton();
        
	QXWidget widgetori = new QXWidget(), widgetdon = new QXWidget(), extwid = new QXWidget();
    QXImage oriimg, doneimg, extimg;
	QXLineEdit precent = new QXLineEdit(), xcoord = new QXLineEdit(), ycoord = new QXLineEdit(), marktext = new QXLineEdit();
	QXImage wmpic;
    Switche ivw = new Switche();
    String fontString = nilptr;
    
    
    void generateMark(bool warning){
		String marktxt = marktext.getText();
		
		if (marktxt.length() == 0){
			if (warning){
				QXMessageBox.Critical("注意","文字大小必须大于0, 水印文字不能为空",QXMessageBox.Ok,QXMessageBox.Ok);
            }
			return ;
		}
		
		QXImage wmimg = new QXImage(100, 100, QXImage.Format_RGB32);
		QXPainter qp = new QXPainter(wmimg);
		
		qp.Paint pt = new qp.Paint();
		pt.setStyle(QXPainter.Paint.FILL_AND_STROKE);
		pt.setColor(0xff000000);
		//pt.setTextSize(fs);
		
		QXFont font = nilptr;
		if (fontString != nilptr){
			font = QXFont.loadFromString(fontString);
		}
		
		if (font != nilptr){
			qp.setFont(font);
		}
		qp.setPaint(pt);
		QXRect rc = qp.measureText(0,0,marktxt);
		qp = nilptr;
		wmimg = new QXImage(rc.width(), rc.height(), QXImage.Format_RGB32);
		qp = new QXPainter(wmimg);
		
		qp.fillRect(0,0,rc.width(), rc.height(),0xffffffff,QXBrush.Style.SolidPattern);
		if (font != nilptr){
			qp.setFont(font);
		}	
		qp.setPaint(pt);
		
		
		qp.drawText(marktxt,0, qp.ascent());
		wmpic = wmimg;
		
		doneimg = wmpic;   
				//doneimg.saveToFile("D:\\Cadaqs\\Desktop\\333.jpg","jpg");
		widgetdon.update();
    }
    
    
	bool create()override{
		QXBuffer qb = new QXBuffer();
        byte [] buffer = __xPackageResource("ui/dialog.ui");
        qb.setBuffer(buffer, 0, buffer.length);
        
		if (load(qb)){
        
			setWindowFlags(WindowMinMaxButtonsHint | WindowCloseButtonHint  | WindowTitleHint);
			attachByName(btnOk, "btnOk");
            attachByName(btnAdd, "btnAdd");
            attachByName(btnref, "btnref");
            attachByName(btnSave, "btnSave");
            
            attachByName(btnAbout, "btnAbout");
            
            attachByName(xcoord, "xcoord");
            attachByName(ycoord, "ycoord");
            
            attachByName(widgetori, "widgetori");
            attachByName(widgetdon, "widgetdon");
            attachByName(extwid, "extwid");
            attachByName(ivw, "ivw");
            
            attachByName(marktext, "marktext");
            attachByName(selfont, "selfont");
            
            attachByName(genmark, "genmark");
            
            attachByName(precent, "precent");
            ivw.setChecked(false, true);
            
            setWindowIcon("ic256.png");
            
            
            widgetori.setOnPaintListener( new onPaintListener(){
                void onPaint(QXObject obj, int l,int t, int r,int b, long hpaint){
					QXPainter painter = new QXPainter(hpaint);                        
					if (oriimg != nilptr){
						painter.drawImage(oriimg,0, 0);
					}
				}
            });
            
            widgetdon.setOnPaintListener( new onPaintListener(){
                void onPaint(QXObject obj, int l,int t, int r,int b, long hpaint){
					QXPainter painter = new QXPainter(hpaint);                        
					if (doneimg != nilptr){
						painter.drawImage(doneimg,0, 0);
					}
				}
            });
            
            extwid.setOnPaintListener( new onPaintListener(){
                void onPaint(QXObject obj, int l,int t, int r,int b, long hpaint){
					QXPainter painter = new QXPainter(hpaint);                        
					if (extimg != nilptr){
						painter.drawImage(extimg,0, 0);
					}
				}
            });
            
            genmark.setOnClickListener(new onClickListener(){
				void onClick(QXObject obj, bool checked)override{
					generateMark(true);
				}
			});
            
			btnOk.setOnClickListener(new onClickListener(){
				void onClick(QXObject obj, bool checked)override{
					String file = QXFileDialog.getOpenFileName("选择图片","","*.*",MainDialog.this);
                    
                    if (file == nilptr || file.length() == 0){
						return;
                    }
                    
                    oriimg = resave(file);
                    if (oriimg == nilptr){
						QXMessageBox.Critical("注意","无效的图像文件:" + file,QXMessageBox.Ok,QXMessageBox.Ok);
						return ;
                    }
                    int w = oriimg.width();
                    int h = oriimg.height();
                    analyze(w, h, oriimg.getdata(), nilptr, 0, 0, 0, false);
				}
			});
            
            btnSave.setOnClickListener(new onClickListener(){
				void onClick(QXObject obj, bool checked)override{
					String file = QXFileDialog.getSaveFileName("保存图片","","*.bmp;;*.png;;*.jpg",MainDialog.this);
                    if (file == nilptr || file.length() == 0){
						return;
                    }
                    
                    String ext = file.findExtension();
                    if (ext.length() > 0){
						ext = ext.substring(1, ext.length());
                    }
                    doneimg.saveToFile(file,ext);
				}
			});
            
            selfont.setOnClickListener(new onClickListener(){
				void onClick(QXObject obj, bool checked)override{
					fontString = QXFontDialog.getFontDialog("选择字体",fontString,MainDialog.this);
                    generateMark(false);
				}
			});
            
            btnAbout.setOnClickListener(new onClickListener(){
            
				static String getAppVersion(){
					long vv = _system_.getAppVersion();
					String vs = "v";
					for (int i = 0; i < 4; i ++){
						vs = vs + ((vv >> ((4 - (i + 1)) << 4)) & 0xffff);
						if (i != 3){
							vs = vs + ".";
						}
					}    
					return vs;
				}
				void onClick(QXObject obj, bool checked)override{
					String buildtime = String.formatDate("%Y年%m月%d日", _system_.getAppTimestamp());
					MainDialog.this.About("关于", 
					"<Strong>隐形数字水印制作工具 " + getAppVersion() + " </Strong><br /><br />" + 
					 "开发语言: Xlang v1.7<br /><br />" + 
					 "编译时间: " + buildtime + "<br /><br />" + 
					 "<b>该软件使用xlang 1.7开发, 软件全部源代码可在xlang的example中找到," + 
					 "该软件的使用不受任何限制,可用于任意用途的修改或者发布.<br /><br />" + 
					 "<em>需要注意该软件底层使用了第三方图形库Qt (Copyright The Qt Company Ltd), 二次发布和使用须遵守第三方授权协议.</em><br /><br />" + 
					 "<strong>该项目中使用了以下第三方项目:</strong><br />" +
					 "<em>	libfftw</em><br />" +
					 "github代码仓库:<a href=\"https://github.com/ixlang/examples\">https://github.com/ixlang/examples</a><br />" + 
					 "<p align=\"right\">建议可通过以下方式反馈</p>" + 
					 "<p align=\"right\">QQ: 3.vc@163.com</p>" + 
					 "<p align=\"right\">Cadaquz 2019-04-07</p>");
				}
			});
            
            btnAdd.setOnClickListener(new onClickListener(){
				void onClick(QXObject obj, bool checked)override{
					if (oriimg == nilptr){
						QXMessageBox.Critical("注意","请先选择图片",QXMessageBox.Ok, QXMessageBox.Ok);
						return ;
                    }
                    
					String markfile = QXFileDialog.getOpenFileName("选择图片","","*.*",MainDialog.this);
                    if (markfile == nilptr || markfile.length() == 0){
						return;
                    }
                    
                    try{
						wmpic = new QXImage(markfile, nilptr);
                    }catch(Exception e){
						QXMessageBox.Critical("注意","无效的图像文件:" + markfile,QXMessageBox.Ok, QXMessageBox.Ok);
                        wmpic = nilptr;
                        return ;
                    }
                    
                    int w = oriimg.width();
                    int h = oriimg.height();
                    
                    if ((wmpic.width() > w) || (wmpic.height() * 2 > h)){
						QXMessageBox.Critical("注意","水印图片过大",QXMessageBox.Ok, QXMessageBox.Ok);
                        markfile = nilptr;
                        return ;
                    }
                    String lp = precent.getText();
                    double pwr = lp.parseDouble();
                    
                    int mx = xcoord.getText().parseInt();
                    int my = ycoord.getText().parseInt();
                    bool biv = ivw.getChecked();
                    
                    if (mx <0 || my < 0 || mx > w - wmpic.width() || my > h - wmpic.height()){
						QXMessageBox.Critical("注意","位置超出范围",QXMessageBox.Ok, QXMessageBox.Ok);
                        return ;
                    }
                    
                    byte[] img_data = oriimg.getdata();
                    analyze(w, h, img_data, wmpic, pwr, mx, my, biv);
				}
			});
            
            
            btnref.setOnClickListener(new onClickListener(){
				void onClick(QXObject obj, bool checked)override{
					if (oriimg == nilptr){
						return ;
                    }

                    if (wmpic == nilptr ){
						return;
                    }
                    
                    
                    String lp = precent.getText();
                    double pwr = lp.parseDouble();
                    int mx = xcoord.getText().parseInt();
                    int my = ycoord.getText().parseInt();
                    bool biv = ivw.getChecked();
                    
                    int w = oriimg.width();
                    int h = oriimg.height();
                    
                    if (mx <0 || my < 0 || mx > w - wmpic.width() || my > h - wmpic.height()){
						QXMessageBox.Critical("注意","位置超出范围",QXMessageBox.Ok, QXMessageBox.Ok);
                        return ;
                    }
                    
                    byte[] img_data = oriimg.getdata();
                    analyze(w, h, img_data, wmpic, pwr, mx, my, biv);
				}
			});
            
            return true;
		}
        return false;
	}
    
    QXImage resave(String file){
		QXImage tmp = nilptr;
		try{
			tmp = new QXImage(file, nilptr);
        }catch(Exception e){
            return tmp;
        }
        byte [] dat = tmp.getdata();
        int w = tmp.width();
        int h = tmp.height();
        
        QXImage rsv = new QXImage(dat, w, h, QXImage.Format_RGB32);  
                            
		String ext = file.findExtension();
		if (ext.length() > 0){
			ext = ext.substring(1, ext.length());
		}
                    
        rsv.saveToFile("tmp.tmp",ext,-1);
        
        return new QXImage("tmp.tmp",ext);
    }
    void analyze(int w,int h, byte [] data, QXImage wmark, double power,int mx,int my,bool biv){
    
		ProgressView pvw = ProgressView.showWait(this, -1);
        //pv.EnableProgress(true,0);
        pvw.setTitleText("处理中...");
        
        new Thread(){
			void run() override{
				int l = data.length / 4;
				
				//读取数据并归一化
				double []r = new double[l];
				double []g = new double[l];
				double []b = new double[l];
				
				for (int i = 0; i < l; i ++){
					r[i] = data[(i * 4) + 2] / 255.f;
					g[i] = data[(i * 4) + 1] / 255.f;
					b[i] = data[(i * 4) + 0] / 255.f;
				}
				
				// 傅里叶正变换
				double[][] rf = fftw.fft2(h, w, r, nilptr);
				double[][] gf = fftw.fft2(h, w, g, nilptr);
				double[][] bf = fftw.fft2(h, w, b, nilptr);
				
				
				if (wmark == nilptr){
					displayMark(rf, gf, bf, w, h);
				}else{
					//打水印
					setWaterMark(rf, gf, bf, w, h, wmark, power ,mx, my, biv);
					
					
					double [][]rt = fftw.ifft2(h,w,rf[0],rf[1]);
					double [][]gt = fftw.ifft2(h,w,gf[0],gf[1]);
					double [][]bt = fftw.ifft2(h,w,bf[0],bf[1]);
					
					double pv = 255.f / l;
					
					byte []rgb = new byte [w * h * 4];
					for (int i = 0; i < l; i ++){
						rgb[2+ (i * 4)] = Math.max(0, Math.min(255,(int)(rt[0][i] * pv)));
						rgb[1+ (i * 4)] = Math.max(0, Math.min(255,(int)(gt[0][i] * pv)));
						rgb[0+ (i * 4)] = Math.max(0, Math.min(255,(int)(bt[0][i] * pv)));
						rgb[3+ (i * 4)] = 0xff;
					}
					
                    runOnUi(new Runnable(){
						void run()override{
							doneimg = new QXImage(rgb, w, h, QXImage.Format_RGB32);   
							//doneimg.saveToFile("D:\\Cadaqs\\Desktop\\333.jpg","jpg");
							widgetdon.update();
                        }
                    });
					
				}
				pvw.dismissAfter(0);
            }
        }.start();
		
    }
    
   
    void setWaterMark(double[][] rf, double[][] gf, double[][] bf, int w ,int h, QXImage qi, double power, int mx, int my,bool biv){        
        byte[] wm = qi.getdata(); 
            
        int l = w * h;

		double pf = power / 255.f;
		int mw = qi.width(), mh = qi.height();
        
        //int st = (w - mw) / 2, sh = (h /2 - mh) / 2;
        
        int st = mx, sh = my;
        
        if (biv){
			for (int x = 0; x < mw; x++){
				for (int y = 0; y < mh; y++){
					int ry = h - (y + sh + 1);
					int rx = w - (x + st + 1);

					int mi = y * mw + x;
					
					int oi = ((y + sh)* w) + x + st;
					int ni = (ry * w) + rx;
					
					rf[0][oi] += (255 - wm[mi * 4 + 0]) * pf;
					gf[0][oi] += (255 - wm[mi * 4 + 1]) * pf;
					bf[0][oi] += (255 - wm[mi * 4 + 2]) * pf;

					rf[0][ni] += (255 - wm[mi * 4 + 0]) * pf;
					gf[0][ni] += (255 - wm[mi * 4 + 1]) * pf;
					bf[0][ni] += (255 - wm[mi * 4 + 2]) * pf;
				}
			}
        }else{
			for (int x = 0; x < mw; x++){
				for (int y = 0; y < mh; y++){
					int ry = h - (y + sh + 1);
					int rx = w - (x + st + 1);

					int mi = y * mw + x;
					
					int oi = ((y + sh)* w) + x + st;
					int ni = (ry * w) + rx;
					
					rf[0][oi] += ( wm[mi * 4 + 0]) * pf;
					gf[0][oi] += ( wm[mi * 4 + 1]) * pf;
					bf[0][oi] += ( wm[mi * 4 + 2]) * pf;

					rf[0][ni] += ( wm[mi * 4 + 0]) * pf;
					gf[0][ni] += ( wm[mi * 4 + 1]) * pf;
					bf[0][ni] += ( wm[mi * 4 + 2]) * pf;
				}
			}
        }
		displayMark(rf, gf, bf, w, h);
    }
    
    void displayMark(double[][] rf, double[][] gf, double[][] bf, int w, int h){
		int l = w * h;
        byte []rgb = new byte [w * h * 4];
        for (int i = 0; i < l; i ++){
            rgb[2+ (i * 4)] = bf[0][i];
            rgb[1+ (i * 4)] = gf[0][i];
            rgb[0+ (i * 4)] = rf[0][i];
            rgb[3+ (i * 4)] = 0xff;
        }
        
        runOnUi(new Runnable(){
			void run()override{
				extimg = new QXImage(rgb, w, h, QXImage.Format_RGB32);   
				//doneimg.saveToFile("D:\\Cadaqs\\Desktop\\333.jpg","jpg");
				extwid.update();
			}
        });
    }
};
 

class XMyApp : QXApplication {

	MainDialog dialog;

    bool create(){
        if (super.createQXApplication()){
            dialog = new MainDialog();
            if (dialog.create()){
				dialog.show();
                return true;
            }
        }
        return false;
    }
    
};


int main(String [] args){
	XMyApp app = new XMyApp();
    if (app.create()){
		app.run();
    }
	return 0;
}